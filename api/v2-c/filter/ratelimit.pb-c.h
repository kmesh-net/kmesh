/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: api/filter/ratelimit.proto */

#ifndef PROTOBUF_C_api_2ffilter_2fratelimit_2eproto__INCLUDED
#define PROTOBUF_C_api_2ffilter_2fratelimit_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Filter__TokenBucket Filter__TokenBucket;
typedef struct Filter__LocalRateLimit Filter__LocalRateLimit;


/* --- enums --- */


/* --- messages --- */

/*
 *TokenBucket defines parameters for a token bucket rate limiter.
 *https://www.envoyproxy.io/docs/envoy/latest/api-v3/type/v3/token_bucket.proto#envoy-v3-api-msg-type-v3-tokenbucket
 *{
 *"max_tokens": ...,
 *"tokens_per_fill": {...},
 *"fill_interval": {...}
 *}
 */
struct  Filter__TokenBucket
{
  ProtobufCMessage base;
  /*
   * The maximum number of tokens in the bucket.
   */
  int64_t max_tokens;
  /*
   * The number of tokens added to the bucket during each fill interval.
   */
  int64_t tokens_per_fill;
  /*
   * The interval at which the bucket is refilled in nanoseconds.
   */
  int64_t fill_interval;
};
#define FILTER__TOKEN_BUCKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&filter__token_bucket__descriptor) \
    , 0, 0, 0 }


/*
 *LocalRateLimit defines parameters for local rate limiting.
 *https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/local_ratelimit/v3/local_rate_limit.proto#envoy-v3-api-msg-extensions-filters-http-local-ratelimit-v3-localratelimit
 *{
 *"token_bucket": {...},
 *}
 */
struct  Filter__LocalRateLimit
{
  ProtobufCMessage base;
  /*
   * The token bucket configuration for the rate limiter.
   */
  Filter__TokenBucket *token_bucket;
};
#define FILTER__LOCAL_RATE_LIMIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&filter__local_rate_limit__descriptor) \
    , NULL }


/* Filter__TokenBucket methods */
void   filter__token_bucket__init
                     (Filter__TokenBucket         *message);
size_t filter__token_bucket__get_packed_size
                     (const Filter__TokenBucket   *message);
size_t filter__token_bucket__pack
                     (const Filter__TokenBucket   *message,
                      uint8_t             *out);
size_t filter__token_bucket__pack_to_buffer
                     (const Filter__TokenBucket   *message,
                      ProtobufCBuffer     *buffer);
Filter__TokenBucket *
       filter__token_bucket__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   filter__token_bucket__free_unpacked
                     (Filter__TokenBucket *message,
                      ProtobufCAllocator *allocator);
/* Filter__LocalRateLimit methods */
void   filter__local_rate_limit__init
                     (Filter__LocalRateLimit         *message);
size_t filter__local_rate_limit__get_packed_size
                     (const Filter__LocalRateLimit   *message);
size_t filter__local_rate_limit__pack
                     (const Filter__LocalRateLimit   *message,
                      uint8_t             *out);
size_t filter__local_rate_limit__pack_to_buffer
                     (const Filter__LocalRateLimit   *message,
                      ProtobufCBuffer     *buffer);
Filter__LocalRateLimit *
       filter__local_rate_limit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   filter__local_rate_limit__free_unpacked
                     (Filter__LocalRateLimit *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Filter__TokenBucket_Closure)
                 (const Filter__TokenBucket *message,
                  void *closure_data);
typedef void (*Filter__LocalRateLimit_Closure)
                 (const Filter__LocalRateLimit *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor filter__token_bucket__descriptor;
extern const ProtobufCMessageDescriptor filter__local_rate_limit__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_api_2ffilter_2fratelimit_2eproto__INCLUDED */
