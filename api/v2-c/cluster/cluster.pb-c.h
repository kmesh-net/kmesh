/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: api/cluster/cluster.proto */

#ifndef PROTOBUF_C_api_2fcluster_2fcluster_2eproto__INCLUDED
#define PROTOBUF_C_api_2fcluster_2fcluster_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "cluster/circuit_breaker.pb-c.h"
#include "endpoint/endpoint.pb-c.h"
#include "core/base.pb-c.h"

typedef struct Cluster__Cluster Cluster__Cluster;


/* --- enums --- */

typedef enum _Cluster__Cluster__LbPolicy {
  CLUSTER__CLUSTER__LB_POLICY__ROUND_ROBIN = 0,
  CLUSTER__CLUSTER__LB_POLICY__LEAST_REQUEST = 1,
  CLUSTER__CLUSTER__LB_POLICY__RANDOM = 3,
  CLUSTER__CLUSTER__LB_POLICY__MAGLEV = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLUSTER__CLUSTER__LB_POLICY)
} Cluster__Cluster__LbPolicy;

/* --- messages --- */

struct  Cluster__Cluster
{
  ProtobufCMessage base;
  Core__ApiStatus api_status;
  char *name;
  uint32_t id;
  uint32_t connect_timeout;
  Cluster__Cluster__LbPolicy lb_policy;
  Endpoint__ClusterLoadAssignment *load_assignment;
  Cluster__CircuitBreakers *circuit_breakers;
};
#define CLUSTER__CLUSTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cluster__cluster__descriptor) \
    , CORE__API_STATUS__NONE, (char *)protobuf_c_empty_string, 0, 0, CLUSTER__CLUSTER__LB_POLICY__ROUND_ROBIN, NULL, NULL }


/* Cluster__Cluster methods */
void   cluster__cluster__init
                     (Cluster__Cluster         *message);
size_t cluster__cluster__get_packed_size
                     (const Cluster__Cluster   *message);
size_t cluster__cluster__pack
                     (const Cluster__Cluster   *message,
                      uint8_t             *out);
size_t cluster__cluster__pack_to_buffer
                     (const Cluster__Cluster   *message,
                      ProtobufCBuffer     *buffer);
Cluster__Cluster *
       cluster__cluster__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cluster__cluster__free_unpacked
                     (Cluster__Cluster *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cluster__Cluster_Closure)
                 (const Cluster__Cluster *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cluster__cluster__descriptor;
extern const ProtobufCEnumDescriptor    cluster__cluster__lb_policy__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_api_2fcluster_2fcluster_2eproto__INCLUDED */
