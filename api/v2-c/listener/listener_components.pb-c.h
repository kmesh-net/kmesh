/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: api/listener/listener_components.proto */

#ifndef PROTOBUF_C_api_2flistener_2flistener_5fcomponents_2eproto__INCLUDED
#define PROTOBUF_C_api_2flistener_2flistener_5fcomponents_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "core/address.pb-c.h"
#include "filter/tcp_proxy.pb-c.h"
#include "filter/http_connection_manager.pb-c.h"

typedef struct Listener__Filter Listener__Filter;
typedef struct Listener__FilterChainMatch Listener__FilterChainMatch;
typedef struct Listener__FilterChain Listener__FilterChain;


/* --- enums --- */


/* --- messages --- */

typedef enum {
  LISTENER__FILTER__CONFIG_TYPE__NOT_SET = 0,
  LISTENER__FILTER__CONFIG_TYPE_TCP_PROXY = 2,
  LISTENER__FILTER__CONFIG_TYPE_HTTP_CONNECTION_MANAGER = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LISTENER__FILTER__CONFIG_TYPE__CASE)
} Listener__Filter__ConfigTypeCase;

struct  Listener__Filter
{
  ProtobufCMessage base;
  char *name;
  Listener__Filter__ConfigTypeCase config_type_case;
  union {
    Filter__TcpProxy *tcp_proxy;
    Filter__HttpConnectionManager *http_connection_manager;
  };
};
#define LISTENER__FILTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&listener__filter__descriptor) \
    , (char *)protobuf_c_empty_string, LISTENER__FILTER__CONFIG_TYPE__NOT_SET, {0} }


struct  Listener__FilterChainMatch
{
  ProtobufCMessage base;
  size_t n_prefix_ranges;
  Core__CidrRange **prefix_ranges;
  uint32_t destination_port;
  char *transport_protocol;
  size_t n_application_protocols;
  char **application_protocols;
};
#define LISTENER__FILTER_CHAIN_MATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&listener__filter_chain_match__descriptor) \
    , 0,NULL, 0, (char *)protobuf_c_empty_string, 0,NULL }


struct  Listener__FilterChain
{
  ProtobufCMessage base;
  Listener__FilterChainMatch *filter_chain_match;
  size_t n_filters;
  Listener__Filter **filters;
  char *name;
};
#define LISTENER__FILTER_CHAIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&listener__filter_chain__descriptor) \
    , NULL, 0,NULL, (char *)protobuf_c_empty_string }


/* Listener__Filter methods */
void   listener__filter__init
                     (Listener__Filter         *message);
size_t listener__filter__get_packed_size
                     (const Listener__Filter   *message);
size_t listener__filter__pack
                     (const Listener__Filter   *message,
                      uint8_t             *out);
size_t listener__filter__pack_to_buffer
                     (const Listener__Filter   *message,
                      ProtobufCBuffer     *buffer);
Listener__Filter *
       listener__filter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   listener__filter__free_unpacked
                     (Listener__Filter *message,
                      ProtobufCAllocator *allocator);
/* Listener__FilterChainMatch methods */
void   listener__filter_chain_match__init
                     (Listener__FilterChainMatch         *message);
size_t listener__filter_chain_match__get_packed_size
                     (const Listener__FilterChainMatch   *message);
size_t listener__filter_chain_match__pack
                     (const Listener__FilterChainMatch   *message,
                      uint8_t             *out);
size_t listener__filter_chain_match__pack_to_buffer
                     (const Listener__FilterChainMatch   *message,
                      ProtobufCBuffer     *buffer);
Listener__FilterChainMatch *
       listener__filter_chain_match__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   listener__filter_chain_match__free_unpacked
                     (Listener__FilterChainMatch *message,
                      ProtobufCAllocator *allocator);
/* Listener__FilterChain methods */
void   listener__filter_chain__init
                     (Listener__FilterChain         *message);
size_t listener__filter_chain__get_packed_size
                     (const Listener__FilterChain   *message);
size_t listener__filter_chain__pack
                     (const Listener__FilterChain   *message,
                      uint8_t             *out);
size_t listener__filter_chain__pack_to_buffer
                     (const Listener__FilterChain   *message,
                      ProtobufCBuffer     *buffer);
Listener__FilterChain *
       listener__filter_chain__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   listener__filter_chain__free_unpacked
                     (Listener__FilterChain *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Listener__Filter_Closure)
                 (const Listener__Filter *message,
                  void *closure_data);
typedef void (*Listener__FilterChainMatch_Closure)
                 (const Listener__FilterChainMatch *message,
                  void *closure_data);
typedef void (*Listener__FilterChain_Closure)
                 (const Listener__FilterChain *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor listener__filter__descriptor;
extern const ProtobufCMessageDescriptor listener__filter_chain_match__descriptor;
extern const ProtobufCMessageDescriptor listener__filter_chain__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_api_2flistener_2flistener_5fcomponents_2eproto__INCLUDED */
