// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package dualengine

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type KmeshSendmsgBpfSockTuple struct {
	Ipv4 struct {
		Saddr uint32
		Daddr uint32
		Sport uint16
		Dport uint16
	}
	_ [24]byte
}

type KmeshSendmsgBuf struct{ Data [40]int8 }

type KmeshSendmsgManagerKey struct {
	NetnsCookie uint64
	_           [8]byte
}

type KmeshSendmsgOperationUsageData struct {
	StartTime     uint64
	EndTime       uint64
	PidTgid       uint64
	OperationType uint32
	_             [4]byte
}

type KmeshSendmsgOperationUsageKey struct {
	SocketCookie  uint64
	OperationType uint32
	_             [4]byte
}

type KmeshSendmsgSockStorageData struct {
	ConnectNs      uint64
	Direction      uint8
	ConnectSuccess uint8
	_              [6]byte
	SockCookie     uint64
}

type KmeshSendmsgTcpProbeInfo struct {
	Type    uint32
	Tuple   KmeshSendmsgBpfSockTuple
	OrigDst struct {
		Ipv4 struct {
			Addr uint32
			Port uint16
			_    [2]byte
		}
		_ [12]byte
	}
	_             [4]byte
	ConnId        uint64
	SentBytes     uint32
	ReceivedBytes uint32
	ConnSuccess   uint32
	Direction     uint32
	State         uint32
	_             [4]byte
	Duration      uint64
	StartNs       uint64
	LastReportNs  uint64
	Protocol      uint32
	SrttUs        uint32
	RttMin        uint32
	TotalRetrans  uint32
	LostOut       uint32
	_             [4]byte
}

// LoadKmeshSendmsg returns the embedded CollectionSpec for KmeshSendmsg.
func LoadKmeshSendmsg() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KmeshSendmsgBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load KmeshSendmsg: %w", err)
	}

	return spec, err
}

// LoadKmeshSendmsgObjects loads KmeshSendmsg and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*KmeshSendmsgObjects
//	*KmeshSendmsgPrograms
//	*KmeshSendmsgMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadKmeshSendmsgObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadKmeshSendmsg()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// KmeshSendmsgSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshSendmsgSpecs struct {
	KmeshSendmsgProgramSpecs
	KmeshSendmsgMapSpecs
	KmeshSendmsgVariableSpecs
}

// KmeshSendmsgProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshSendmsgProgramSpecs struct {
	SendmsgProg *ebpf.ProgramSpec `ebpf:"sendmsg_prog"`
}

// KmeshSendmsgMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshSendmsgMapSpecs struct {
	KmAuthReq     *ebpf.MapSpec `ebpf:"km_auth_req"`
	KmAuthRes     *ebpf.MapSpec `ebpf:"km_auth_res"`
	KmBackend     *ebpf.MapSpec `ebpf:"km_backend"`
	KmConnFlush   *ebpf.MapSpec `ebpf:"km_conn_flush"`
	KmEndpoint    *ebpf.MapSpec `ebpf:"km_endpoint"`
	KmFrontend    *ebpf.MapSpec `ebpf:"km_frontend"`
	KmLogEvent    *ebpf.MapSpec `ebpf:"km_log_event"`
	KmManage      *ebpf.MapSpec `ebpf:"km_manage"`
	KmOrigDst     *ebpf.MapSpec `ebpf:"km_orig_dst"`
	KmPerfInfo    *ebpf.MapSpec `ebpf:"km_perf_info"`
	KmPerfMap     *ebpf.MapSpec `ebpf:"km_perf_map"`
	KmService     *ebpf.MapSpec `ebpf:"km_service"`
	KmSocId       *ebpf.MapSpec `ebpf:"km_soc_id"`
	KmSocIdCnt    *ebpf.MapSpec `ebpf:"km_soc_id_cnt"`
	KmSockstorage *ebpf.MapSpec `ebpf:"km_sockstorage"`
	KmTcpConns    *ebpf.MapSpec `ebpf:"km_tcp_conns"`
	KmTcpProbe    *ebpf.MapSpec `ebpf:"km_tcp_probe"`
	KmTmpbuf      *ebpf.MapSpec `ebpf:"km_tmpbuf"`
	KmWlpolicy    *ebpf.MapSpec `ebpf:"km_wlpolicy"`
	KmeshMap1600  *ebpf.MapSpec `ebpf:"kmesh_map1600"`
	KmeshMap192   *ebpf.MapSpec `ebpf:"kmesh_map192"`
	KmeshMap296   *ebpf.MapSpec `ebpf:"kmesh_map296"`
	KmeshMap64    *ebpf.MapSpec `ebpf:"kmesh_map64"`
}

// KmeshSendmsgVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshSendmsgVariableSpecs struct {
	BpfLogLevel      *ebpf.VariableSpec `ebpf:"bpf_log_level"`
	EnableMonitoring *ebpf.VariableSpec `ebpf:"enable_monitoring"`
}

// KmeshSendmsgObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshSendmsgObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshSendmsgObjects struct {
	KmeshSendmsgPrograms
	KmeshSendmsgMaps
	KmeshSendmsgVariables
}

func (o *KmeshSendmsgObjects) Close() error {
	return _KmeshSendmsgClose(
		&o.KmeshSendmsgPrograms,
		&o.KmeshSendmsgMaps,
	)
}

// KmeshSendmsgMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshSendmsgObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshSendmsgMaps struct {
	KmAuthReq     *ebpf.Map `ebpf:"km_auth_req"`
	KmAuthRes     *ebpf.Map `ebpf:"km_auth_res"`
	KmBackend     *ebpf.Map `ebpf:"km_backend"`
	KmConnFlush   *ebpf.Map `ebpf:"km_conn_flush"`
	KmEndpoint    *ebpf.Map `ebpf:"km_endpoint"`
	KmFrontend    *ebpf.Map `ebpf:"km_frontend"`
	KmLogEvent    *ebpf.Map `ebpf:"km_log_event"`
	KmManage      *ebpf.Map `ebpf:"km_manage"`
	KmOrigDst     *ebpf.Map `ebpf:"km_orig_dst"`
	KmPerfInfo    *ebpf.Map `ebpf:"km_perf_info"`
	KmPerfMap     *ebpf.Map `ebpf:"km_perf_map"`
	KmService     *ebpf.Map `ebpf:"km_service"`
	KmSocId       *ebpf.Map `ebpf:"km_soc_id"`
	KmSocIdCnt    *ebpf.Map `ebpf:"km_soc_id_cnt"`
	KmSockstorage *ebpf.Map `ebpf:"km_sockstorage"`
	KmTcpConns    *ebpf.Map `ebpf:"km_tcp_conns"`
	KmTcpProbe    *ebpf.Map `ebpf:"km_tcp_probe"`
	KmTmpbuf      *ebpf.Map `ebpf:"km_tmpbuf"`
	KmWlpolicy    *ebpf.Map `ebpf:"km_wlpolicy"`
	KmeshMap1600  *ebpf.Map `ebpf:"kmesh_map1600"`
	KmeshMap192   *ebpf.Map `ebpf:"kmesh_map192"`
	KmeshMap296   *ebpf.Map `ebpf:"kmesh_map296"`
	KmeshMap64    *ebpf.Map `ebpf:"kmesh_map64"`
}

func (m *KmeshSendmsgMaps) Close() error {
	return _KmeshSendmsgClose(
		m.KmAuthReq,
		m.KmAuthRes,
		m.KmBackend,
		m.KmConnFlush,
		m.KmEndpoint,
		m.KmFrontend,
		m.KmLogEvent,
		m.KmManage,
		m.KmOrigDst,
		m.KmPerfInfo,
		m.KmPerfMap,
		m.KmService,
		m.KmSocId,
		m.KmSocIdCnt,
		m.KmSockstorage,
		m.KmTcpConns,
		m.KmTcpProbe,
		m.KmTmpbuf,
		m.KmWlpolicy,
		m.KmeshMap1600,
		m.KmeshMap192,
		m.KmeshMap296,
		m.KmeshMap64,
	)
}

// KmeshSendmsgVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshSendmsgObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshSendmsgVariables struct {
	BpfLogLevel      *ebpf.Variable `ebpf:"bpf_log_level"`
	EnableMonitoring *ebpf.Variable `ebpf:"enable_monitoring"`
}

// KmeshSendmsgPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshSendmsgObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshSendmsgPrograms struct {
	SendmsgProg *ebpf.Program `ebpf:"sendmsg_prog"`
}

func (p *KmeshSendmsgPrograms) Close() error {
	return _KmeshSendmsgClose(
		p.SendmsgProg,
	)
}

func _KmeshSendmsgClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed kmeshsendmsg_bpfeb.o
var _KmeshSendmsgBytes []byte
