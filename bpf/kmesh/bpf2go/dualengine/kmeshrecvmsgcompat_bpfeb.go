// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package dualengine

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type KmeshRecvmsgCompatBpfSockTuple struct {
	Ipv4 struct {
		Saddr uint32
		Daddr uint32
		Sport uint16
		Dport uint16
	}
	_ [24]byte
}

type KmeshRecvmsgCompatBuf struct{ Data [40]int8 }

// LoadKmeshRecvmsgCompat returns the embedded CollectionSpec for KmeshRecvmsgCompat.
func LoadKmeshRecvmsgCompat() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KmeshRecvmsgCompatBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load KmeshRecvmsgCompat: %w", err)
	}

	return spec, err
}

// LoadKmeshRecvmsgCompatObjects loads KmeshRecvmsgCompat and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*KmeshRecvmsgCompatObjects
//	*KmeshRecvmsgCompatPrograms
//	*KmeshRecvmsgCompatMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadKmeshRecvmsgCompatObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadKmeshRecvmsgCompat()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// KmeshRecvmsgCompatSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshRecvmsgCompatSpecs struct {
	KmeshRecvmsgCompatProgramSpecs
	KmeshRecvmsgCompatMapSpecs
	KmeshRecvmsgCompatVariableSpecs
}

// KmeshRecvmsgCompatProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshRecvmsgCompatProgramSpecs struct {
	RecvmsgProg *ebpf.ProgramSpec `ebpf:"recvmsg_prog"`
}

// KmeshRecvmsgCompatMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshRecvmsgCompatMapSpecs struct {
	KmLogEvent *ebpf.MapSpec `ebpf:"km_log_event"`
	KmOrigDst  *ebpf.MapSpec `ebpf:"km_orig_dst"`
	KmTmpbuf   *ebpf.MapSpec `ebpf:"km_tmpbuf"`
}

// KmeshRecvmsgCompatVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshRecvmsgCompatVariableSpecs struct {
	BpfLogLevel *ebpf.VariableSpec `ebpf:"bpf_log_level"`
}

// KmeshRecvmsgCompatObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshRecvmsgCompatObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshRecvmsgCompatObjects struct {
	KmeshRecvmsgCompatPrograms
	KmeshRecvmsgCompatMaps
	KmeshRecvmsgCompatVariables
}

func (o *KmeshRecvmsgCompatObjects) Close() error {
	return _KmeshRecvmsgCompatClose(
		&o.KmeshRecvmsgCompatPrograms,
		&o.KmeshRecvmsgCompatMaps,
	)
}

// KmeshRecvmsgCompatMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshRecvmsgCompatObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshRecvmsgCompatMaps struct {
	KmLogEvent *ebpf.Map `ebpf:"km_log_event"`
	KmOrigDst  *ebpf.Map `ebpf:"km_orig_dst"`
	KmTmpbuf   *ebpf.Map `ebpf:"km_tmpbuf"`
}

func (m *KmeshRecvmsgCompatMaps) Close() error {
	return _KmeshRecvmsgCompatClose(
		m.KmLogEvent,
		m.KmOrigDst,
		m.KmTmpbuf,
	)
}

// KmeshRecvmsgCompatVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshRecvmsgCompatObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshRecvmsgCompatVariables struct {
	BpfLogLevel *ebpf.Variable `ebpf:"bpf_log_level"`
}

// KmeshRecvmsgCompatPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshRecvmsgCompatObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshRecvmsgCompatPrograms struct {
	RecvmsgProg *ebpf.Program `ebpf:"recvmsg_prog"`
}

func (p *KmeshRecvmsgCompatPrograms) Close() error {
	return _KmeshRecvmsgCompatClose(
		p.RecvmsgProg,
	)
}

func _KmeshRecvmsgCompatClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed kmeshrecvmsgcompat_bpfeb.o
var _KmeshRecvmsgCompatBytes []byte
