// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package dualengine

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type KmeshCgroupSkbBpfSockTuple struct {
	Ipv4 struct {
		Saddr uint32
		Daddr uint32
		Sport uint16
		Dport uint16
	}
	_ [24]byte
}

type KmeshCgroupSkbBuf struct{ Data [40]int8 }

type KmeshCgroupSkbManagerKey struct {
	NetnsCookie uint64
	_           [8]byte
}

type KmeshCgroupSkbOperationUsageData struct {
	StartTime     uint64
	EndTime       uint64
	PidTgid       uint64
	OperationType uint32
	_             [4]byte
}

type KmeshCgroupSkbOperationUsageKey struct {
	SocketCookie  uint64
	OperationType uint32
	_             [4]byte
}

type KmeshCgroupSkbSockStorageData struct {
	ConnectNs      uint64
	LastReportNs   uint64
	Direction      uint8
	ConnectSuccess uint8
	ViaWaypoint    bool
	HasEncoded     bool
	HasSetIp       bool
	_              [3]byte
	SkTuple        KmeshCgroupSkbBpfSockTuple
	_              [4]byte
}

// LoadKmeshCgroupSkb returns the embedded CollectionSpec for KmeshCgroupSkb.
func LoadKmeshCgroupSkb() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KmeshCgroupSkbBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load KmeshCgroupSkb: %w", err)
	}

	return spec, err
}

// LoadKmeshCgroupSkbObjects loads KmeshCgroupSkb and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*KmeshCgroupSkbObjects
//	*KmeshCgroupSkbPrograms
//	*KmeshCgroupSkbMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadKmeshCgroupSkbObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadKmeshCgroupSkb()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// KmeshCgroupSkbSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshCgroupSkbSpecs struct {
	KmeshCgroupSkbProgramSpecs
	KmeshCgroupSkbMapSpecs
	KmeshCgroupSkbVariableSpecs
}

// KmeshCgroupSkbProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshCgroupSkbProgramSpecs struct {
	CgroupSkbEgressProg  *ebpf.ProgramSpec `ebpf:"cgroup_skb_egress_prog"`
	CgroupSkbIngressProg *ebpf.ProgramSpec `ebpf:"cgroup_skb_ingress_prog"`
}

// KmeshCgroupSkbMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshCgroupSkbMapSpecs struct {
	KmAuthReq     *ebpf.MapSpec `ebpf:"km_auth_req"`
	KmAuthRes     *ebpf.MapSpec `ebpf:"km_auth_res"`
	KmBackend     *ebpf.MapSpec `ebpf:"km_backend"`
	KmEndpoint    *ebpf.MapSpec `ebpf:"km_endpoint"`
	KmFrontend    *ebpf.MapSpec `ebpf:"km_frontend"`
	KmLogEvent    *ebpf.MapSpec `ebpf:"km_log_event"`
	KmManage      *ebpf.MapSpec `ebpf:"km_manage"`
	KmPerfInfo    *ebpf.MapSpec `ebpf:"km_perf_info"`
	KmPerfMap     *ebpf.MapSpec `ebpf:"km_perf_map"`
	KmService     *ebpf.MapSpec `ebpf:"km_service"`
	KmSockstorage *ebpf.MapSpec `ebpf:"km_sockstorage"`
	KmTcpProbe    *ebpf.MapSpec `ebpf:"km_tcp_probe"`
	KmTmpbuf      *ebpf.MapSpec `ebpf:"km_tmpbuf"`
	KmWlpolicy    *ebpf.MapSpec `ebpf:"km_wlpolicy"`
	KmeshMap1600  *ebpf.MapSpec `ebpf:"kmesh_map1600"`
	KmeshMap192   *ebpf.MapSpec `ebpf:"kmesh_map192"`
	KmeshMap296   *ebpf.MapSpec `ebpf:"kmesh_map296"`
	KmeshMap64    *ebpf.MapSpec `ebpf:"kmesh_map64"`
}

// KmeshCgroupSkbVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshCgroupSkbVariableSpecs struct {
	BpfLogLevel      *ebpf.VariableSpec `ebpf:"bpf_log_level"`
	EnableMonitoring *ebpf.VariableSpec `ebpf:"enable_monitoring"`
}

// KmeshCgroupSkbObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshCgroupSkbObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshCgroupSkbObjects struct {
	KmeshCgroupSkbPrograms
	KmeshCgroupSkbMaps
	KmeshCgroupSkbVariables
}

func (o *KmeshCgroupSkbObjects) Close() error {
	return _KmeshCgroupSkbClose(
		&o.KmeshCgroupSkbPrograms,
		&o.KmeshCgroupSkbMaps,
	)
}

// KmeshCgroupSkbMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshCgroupSkbObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshCgroupSkbMaps struct {
	KmAuthReq     *ebpf.Map `ebpf:"km_auth_req"`
	KmAuthRes     *ebpf.Map `ebpf:"km_auth_res"`
	KmBackend     *ebpf.Map `ebpf:"km_backend"`
	KmEndpoint    *ebpf.Map `ebpf:"km_endpoint"`
	KmFrontend    *ebpf.Map `ebpf:"km_frontend"`
	KmLogEvent    *ebpf.Map `ebpf:"km_log_event"`
	KmManage      *ebpf.Map `ebpf:"km_manage"`
	KmPerfInfo    *ebpf.Map `ebpf:"km_perf_info"`
	KmPerfMap     *ebpf.Map `ebpf:"km_perf_map"`
	KmService     *ebpf.Map `ebpf:"km_service"`
	KmSockstorage *ebpf.Map `ebpf:"km_sockstorage"`
	KmTcpProbe    *ebpf.Map `ebpf:"km_tcp_probe"`
	KmTmpbuf      *ebpf.Map `ebpf:"km_tmpbuf"`
	KmWlpolicy    *ebpf.Map `ebpf:"km_wlpolicy"`
	KmeshMap1600  *ebpf.Map `ebpf:"kmesh_map1600"`
	KmeshMap192   *ebpf.Map `ebpf:"kmesh_map192"`
	KmeshMap296   *ebpf.Map `ebpf:"kmesh_map296"`
	KmeshMap64    *ebpf.Map `ebpf:"kmesh_map64"`
}

func (m *KmeshCgroupSkbMaps) Close() error {
	return _KmeshCgroupSkbClose(
		m.KmAuthReq,
		m.KmAuthRes,
		m.KmBackend,
		m.KmEndpoint,
		m.KmFrontend,
		m.KmLogEvent,
		m.KmManage,
		m.KmPerfInfo,
		m.KmPerfMap,
		m.KmService,
		m.KmSockstorage,
		m.KmTcpProbe,
		m.KmTmpbuf,
		m.KmWlpolicy,
		m.KmeshMap1600,
		m.KmeshMap192,
		m.KmeshMap296,
		m.KmeshMap64,
	)
}

// KmeshCgroupSkbVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshCgroupSkbObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshCgroupSkbVariables struct {
	BpfLogLevel      *ebpf.Variable `ebpf:"bpf_log_level"`
	EnableMonitoring *ebpf.Variable `ebpf:"enable_monitoring"`
}

// KmeshCgroupSkbPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshCgroupSkbObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshCgroupSkbPrograms struct {
	CgroupSkbEgressProg  *ebpf.Program `ebpf:"cgroup_skb_egress_prog"`
	CgroupSkbIngressProg *ebpf.Program `ebpf:"cgroup_skb_ingress_prog"`
}

func (p *KmeshCgroupSkbPrograms) Close() error {
	return _KmeshCgroupSkbClose(
		p.CgroupSkbEgressProg,
		p.CgroupSkbIngressProg,
	)
}

func _KmeshCgroupSkbClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed kmeshcgroupskb_bpfel.o
var _KmeshCgroupSkbBytes []byte
