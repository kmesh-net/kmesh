// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package dualengine

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type KmeshRecvmsgBpfSockTuple struct {
	Ipv4 struct {
		Saddr uint32
		Daddr uint32
		Sport uint16
		Dport uint16
	}
	_ [24]byte
}

type KmeshRecvmsgBuf struct{ Data [40]int8 }

type KmeshRecvmsgManagerKey struct {
	NetnsCookie uint64
	_           [8]byte
}

type KmeshRecvmsgOperationUsageData struct {
	StartTime     uint64
	EndTime       uint64
	PidTgid       uint64
	OperationType uint32
	_             [4]byte
}

type KmeshRecvmsgOperationUsageKey struct {
	SocketCookie  uint64
	OperationType uint32
	_             [4]byte
}

type KmeshRecvmsgSockStorageData struct {
	ConnectNs      uint64
	Direction      uint8
	ConnectSuccess uint8
	_              [6]byte
}

// LoadKmeshRecvmsg returns the embedded CollectionSpec for KmeshRecvmsg.
func LoadKmeshRecvmsg() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KmeshRecvmsgBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load KmeshRecvmsg: %w", err)
	}

	return spec, err
}

// LoadKmeshRecvmsgObjects loads KmeshRecvmsg and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*KmeshRecvmsgObjects
//	*KmeshRecvmsgPrograms
//	*KmeshRecvmsgMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadKmeshRecvmsgObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadKmeshRecvmsg()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// KmeshRecvmsgSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshRecvmsgSpecs struct {
	KmeshRecvmsgProgramSpecs
	KmeshRecvmsgMapSpecs
	KmeshRecvmsgVariableSpecs
}

// KmeshRecvmsgProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshRecvmsgProgramSpecs struct {
	RecvmsgProg *ebpf.ProgramSpec `ebpf:"recvmsg_prog"`
}

// KmeshRecvmsgMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshRecvmsgMapSpecs struct {
	KmAuthReq     *ebpf.MapSpec `ebpf:"km_auth_req"`
	KmAuthRes     *ebpf.MapSpec `ebpf:"km_auth_res"`
	KmBackend     *ebpf.MapSpec `ebpf:"km_backend"`
	KmEndpoint    *ebpf.MapSpec `ebpf:"km_endpoint"`
	KmFrontend    *ebpf.MapSpec `ebpf:"km_frontend"`
	KmLogEvent    *ebpf.MapSpec `ebpf:"km_log_event"`
	KmManage      *ebpf.MapSpec `ebpf:"km_manage"`
	KmOrigDst     *ebpf.MapSpec `ebpf:"km_orig_dst"`
	KmPerfInfo    *ebpf.MapSpec `ebpf:"km_perf_info"`
	KmPerfMap     *ebpf.MapSpec `ebpf:"km_perf_map"`
	KmService     *ebpf.MapSpec `ebpf:"km_service"`
	KmSockstorage *ebpf.MapSpec `ebpf:"km_sockstorage"`
	KmTcpProbe    *ebpf.MapSpec `ebpf:"km_tcp_probe"`
	KmTmpbuf      *ebpf.MapSpec `ebpf:"km_tmpbuf"`
	KmWlpolicy    *ebpf.MapSpec `ebpf:"km_wlpolicy"`
	KmeshMap1600  *ebpf.MapSpec `ebpf:"kmesh_map1600"`
	KmeshMap192   *ebpf.MapSpec `ebpf:"kmesh_map192"`
	KmeshMap296   *ebpf.MapSpec `ebpf:"kmesh_map296"`
	KmeshMap64    *ebpf.MapSpec `ebpf:"kmesh_map64"`
}

// KmeshRecvmsgVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshRecvmsgVariableSpecs struct {
	BpfLogLevel      *ebpf.VariableSpec `ebpf:"bpf_log_level"`
	EnableMonitoring *ebpf.VariableSpec `ebpf:"enable_monitoring"`
}

// KmeshRecvmsgObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshRecvmsgObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshRecvmsgObjects struct {
	KmeshRecvmsgPrograms
	KmeshRecvmsgMaps
	KmeshRecvmsgVariables
}

func (o *KmeshRecvmsgObjects) Close() error {
	return _KmeshRecvmsgClose(
		&o.KmeshRecvmsgPrograms,
		&o.KmeshRecvmsgMaps,
	)
}

// KmeshRecvmsgMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshRecvmsgObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshRecvmsgMaps struct {
	KmAuthReq     *ebpf.Map `ebpf:"km_auth_req"`
	KmAuthRes     *ebpf.Map `ebpf:"km_auth_res"`
	KmBackend     *ebpf.Map `ebpf:"km_backend"`
	KmEndpoint    *ebpf.Map `ebpf:"km_endpoint"`
	KmFrontend    *ebpf.Map `ebpf:"km_frontend"`
	KmLogEvent    *ebpf.Map `ebpf:"km_log_event"`
	KmManage      *ebpf.Map `ebpf:"km_manage"`
	KmOrigDst     *ebpf.Map `ebpf:"km_orig_dst"`
	KmPerfInfo    *ebpf.Map `ebpf:"km_perf_info"`
	KmPerfMap     *ebpf.Map `ebpf:"km_perf_map"`
	KmService     *ebpf.Map `ebpf:"km_service"`
	KmSockstorage *ebpf.Map `ebpf:"km_sockstorage"`
	KmTcpProbe    *ebpf.Map `ebpf:"km_tcp_probe"`
	KmTmpbuf      *ebpf.Map `ebpf:"km_tmpbuf"`
	KmWlpolicy    *ebpf.Map `ebpf:"km_wlpolicy"`
	KmeshMap1600  *ebpf.Map `ebpf:"kmesh_map1600"`
	KmeshMap192   *ebpf.Map `ebpf:"kmesh_map192"`
	KmeshMap296   *ebpf.Map `ebpf:"kmesh_map296"`
	KmeshMap64    *ebpf.Map `ebpf:"kmesh_map64"`
}

func (m *KmeshRecvmsgMaps) Close() error {
	return _KmeshRecvmsgClose(
		m.KmAuthReq,
		m.KmAuthRes,
		m.KmBackend,
		m.KmEndpoint,
		m.KmFrontend,
		m.KmLogEvent,
		m.KmManage,
		m.KmOrigDst,
		m.KmPerfInfo,
		m.KmPerfMap,
		m.KmService,
		m.KmSockstorage,
		m.KmTcpProbe,
		m.KmTmpbuf,
		m.KmWlpolicy,
		m.KmeshMap1600,
		m.KmeshMap192,
		m.KmeshMap296,
		m.KmeshMap64,
	)
}

// KmeshRecvmsgVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshRecvmsgObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshRecvmsgVariables struct {
	BpfLogLevel      *ebpf.Variable `ebpf:"bpf_log_level"`
	EnableMonitoring *ebpf.Variable `ebpf:"enable_monitoring"`
}

// KmeshRecvmsgPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshRecvmsgObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshRecvmsgPrograms struct {
	RecvmsgProg *ebpf.Program `ebpf:"recvmsg_prog"`
}

func (p *KmeshRecvmsgPrograms) Close() error {
	return _KmeshRecvmsgClose(
		p.RecvmsgProg,
	)
}

func _KmeshRecvmsgClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed kmeshrecvmsg_bpfel.o
var _KmeshRecvmsgBytes []byte
