// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package normal

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type KmeshSockopsCompatBuf struct{ Data [40]int8 }

type KmeshSockopsCompatClusterSockData struct{ ClusterId uint32 }

type KmeshSockopsCompatKmeshConfig struct {
	BpfLogLevel      uint32
	NodeIp           [4]uint32
	PodGateway       [4]uint32
	AuthzOffload     uint32
	EnableMonitoring uint32
}

type KmeshSockopsCompatManagerKey struct {
	NetnsCookie uint64
	_           [8]byte
}

type KmeshSockopsCompatSockStorageData struct {
	ConnectNs      uint64
	Direction      uint8
	ConnectSuccess uint8
	_              [6]byte
}

// LoadKmeshSockopsCompat returns the embedded CollectionSpec for KmeshSockopsCompat.
func LoadKmeshSockopsCompat() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KmeshSockopsCompatBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load KmeshSockopsCompat: %w", err)
	}

	return spec, err
}

// LoadKmeshSockopsCompatObjects loads KmeshSockopsCompat and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*KmeshSockopsCompatObjects
//	*KmeshSockopsCompatPrograms
//	*KmeshSockopsCompatMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadKmeshSockopsCompatObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadKmeshSockopsCompat()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// KmeshSockopsCompatSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshSockopsCompatSpecs struct {
	KmeshSockopsCompatProgramSpecs
	KmeshSockopsCompatMapSpecs
	KmeshSockopsCompatVariableSpecs
}

// KmeshSockopsCompatProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshSockopsCompatProgramSpecs struct {
	SockopsProg *ebpf.ProgramSpec `ebpf:"sockops_prog"`
}

// KmeshSockopsCompatMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshSockopsCompatMapSpecs struct {
	KmClusterSock  *ebpf.MapSpec `ebpf:"km_cluster_sock"`
	KmClusterstats *ebpf.MapSpec `ebpf:"km_clusterstats"`
	KmConfigmap    *ebpf.MapSpec `ebpf:"km_configmap"`
	KmLogEvent     *ebpf.MapSpec `ebpf:"km_log_event"`
	KmManage       *ebpf.MapSpec `ebpf:"km_manage"`
	KmSockstorage  *ebpf.MapSpec `ebpf:"km_sockstorage"`
	KmTmpbuf       *ebpf.MapSpec `ebpf:"km_tmpbuf"`
	KmeshMap1600   *ebpf.MapSpec `ebpf:"kmesh_map1600"`
	KmeshMap192    *ebpf.MapSpec `ebpf:"kmesh_map192"`
	KmeshMap296    *ebpf.MapSpec `ebpf:"kmesh_map296"`
	KmeshMap64     *ebpf.MapSpec `ebpf:"kmesh_map64"`
}

// KmeshSockopsCompatVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshSockopsCompatVariableSpecs struct {
	BpfLogLevel *ebpf.VariableSpec `ebpf:"bpf_log_level"`
}

// KmeshSockopsCompatObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshSockopsCompatObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshSockopsCompatObjects struct {
	KmeshSockopsCompatPrograms
	KmeshSockopsCompatMaps
	KmeshSockopsCompatVariables
}

func (o *KmeshSockopsCompatObjects) Close() error {
	return _KmeshSockopsCompatClose(
		&o.KmeshSockopsCompatPrograms,
		&o.KmeshSockopsCompatMaps,
	)
}

// KmeshSockopsCompatMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshSockopsCompatObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshSockopsCompatMaps struct {
	KmClusterSock  *ebpf.Map `ebpf:"km_cluster_sock"`
	KmClusterstats *ebpf.Map `ebpf:"km_clusterstats"`
	KmConfigmap    *ebpf.Map `ebpf:"km_configmap"`
	KmLogEvent     *ebpf.Map `ebpf:"km_log_event"`
	KmManage       *ebpf.Map `ebpf:"km_manage"`
	KmSockstorage  *ebpf.Map `ebpf:"km_sockstorage"`
	KmTmpbuf       *ebpf.Map `ebpf:"km_tmpbuf"`
	KmeshMap1600   *ebpf.Map `ebpf:"kmesh_map1600"`
	KmeshMap192    *ebpf.Map `ebpf:"kmesh_map192"`
	KmeshMap296    *ebpf.Map `ebpf:"kmesh_map296"`
	KmeshMap64     *ebpf.Map `ebpf:"kmesh_map64"`
}

func (m *KmeshSockopsCompatMaps) Close() error {
	return _KmeshSockopsCompatClose(
		m.KmClusterSock,
		m.KmClusterstats,
		m.KmConfigmap,
		m.KmLogEvent,
		m.KmManage,
		m.KmSockstorage,
		m.KmTmpbuf,
		m.KmeshMap1600,
		m.KmeshMap192,
		m.KmeshMap296,
		m.KmeshMap64,
	)
}

// KmeshSockopsCompatVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshSockopsCompatObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshSockopsCompatVariables struct {
	BpfLogLevel *ebpf.Variable `ebpf:"bpf_log_level"`
}

// KmeshSockopsCompatPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshSockopsCompatObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshSockopsCompatPrograms struct {
	SockopsProg *ebpf.Program `ebpf:"sockops_prog"`
}

func (p *KmeshSockopsCompatPrograms) Close() error {
	return _KmeshSockopsCompatClose(
		p.SockopsProg,
	)
}

func _KmeshSockopsCompatClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed kmeshsockopscompat_bpfel.o
var _KmeshSockopsCompatBytes []byte
