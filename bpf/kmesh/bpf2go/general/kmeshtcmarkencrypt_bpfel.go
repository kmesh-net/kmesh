// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package general

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type KmeshTcMarkEncryptBuf struct{ Data [40]int8 }

type KmeshTcMarkEncryptKmeshConfig struct {
	BpfLogLevel      uint32
	NodeIp           [4]uint32
	PodGateway       [4]uint32
	AuthzOffload     uint32
	EnableMonitoring uint32
}

type KmeshTcMarkEncryptLpmKey struct {
	TrieKey struct {
		Prefixlen uint32
		Data      [0]uint8
	}
	Ip struct {
		Ip4 uint32
		_   [12]byte
	}
}

// LoadKmeshTcMarkEncrypt returns the embedded CollectionSpec for KmeshTcMarkEncrypt.
func LoadKmeshTcMarkEncrypt() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KmeshTcMarkEncryptBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load KmeshTcMarkEncrypt: %w", err)
	}

	return spec, err
}

// LoadKmeshTcMarkEncryptObjects loads KmeshTcMarkEncrypt and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*KmeshTcMarkEncryptObjects
//	*KmeshTcMarkEncryptPrograms
//	*KmeshTcMarkEncryptMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadKmeshTcMarkEncryptObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadKmeshTcMarkEncrypt()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// KmeshTcMarkEncryptSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshTcMarkEncryptSpecs struct {
	KmeshTcMarkEncryptProgramSpecs
	KmeshTcMarkEncryptMapSpecs
	KmeshTcMarkEncryptVariableSpecs
}

// KmeshTcMarkEncryptProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshTcMarkEncryptProgramSpecs struct {
	TcMarkEncrypt *ebpf.ProgramSpec `ebpf:"tc_mark_encrypt"`
}

// KmeshTcMarkEncryptMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshTcMarkEncryptMapSpecs struct {
	KmConfigmap *ebpf.MapSpec `ebpf:"km_configmap"`
	KmLogEvent  *ebpf.MapSpec `ebpf:"km_log_event"`
	KmNodeinfo  *ebpf.MapSpec `ebpf:"km_nodeinfo"`
	KmTmpbuf    *ebpf.MapSpec `ebpf:"km_tmpbuf"`
}

// KmeshTcMarkEncryptVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshTcMarkEncryptVariableSpecs struct {
}

// KmeshTcMarkEncryptObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshTcMarkEncryptObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshTcMarkEncryptObjects struct {
	KmeshTcMarkEncryptPrograms
	KmeshTcMarkEncryptMaps
	KmeshTcMarkEncryptVariables
}

func (o *KmeshTcMarkEncryptObjects) Close() error {
	return _KmeshTcMarkEncryptClose(
		&o.KmeshTcMarkEncryptPrograms,
		&o.KmeshTcMarkEncryptMaps,
	)
}

// KmeshTcMarkEncryptMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshTcMarkEncryptObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshTcMarkEncryptMaps struct {
	KmConfigmap *ebpf.Map `ebpf:"km_configmap"`
	KmLogEvent  *ebpf.Map `ebpf:"km_log_event"`
	KmNodeinfo  *ebpf.Map `ebpf:"km_nodeinfo"`
	KmTmpbuf    *ebpf.Map `ebpf:"km_tmpbuf"`
}

func (m *KmeshTcMarkEncryptMaps) Close() error {
	return _KmeshTcMarkEncryptClose(
		m.KmConfigmap,
		m.KmLogEvent,
		m.KmNodeinfo,
		m.KmTmpbuf,
	)
}

// KmeshTcMarkEncryptVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshTcMarkEncryptObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshTcMarkEncryptVariables struct {
}

// KmeshTcMarkEncryptPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshTcMarkEncryptObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshTcMarkEncryptPrograms struct {
	TcMarkEncrypt *ebpf.Program `ebpf:"tc_mark_encrypt"`
}

func (p *KmeshTcMarkEncryptPrograms) Close() error {
	return _KmeshTcMarkEncryptClose(
		p.TcMarkEncrypt,
	)
}

func _KmeshTcMarkEncryptClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed kmeshtcmarkencrypt_bpfel.o
var _KmeshTcMarkEncryptBytes []byte
