// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package general

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type KmeshTcMarkDecryptCompatBuf struct{ Data [40]int8 }

type KmeshTcMarkDecryptCompatLpmKey struct {
	TrieKey struct {
		Prefixlen uint32
		Data      [0]uint8
	}
	Ip struct {
		Ip4 uint32
		_   [12]byte
	}
}

// LoadKmeshTcMarkDecryptCompat returns the embedded CollectionSpec for KmeshTcMarkDecryptCompat.
func LoadKmeshTcMarkDecryptCompat() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KmeshTcMarkDecryptCompatBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load KmeshTcMarkDecryptCompat: %w", err)
	}

	return spec, err
}

// LoadKmeshTcMarkDecryptCompatObjects loads KmeshTcMarkDecryptCompat and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*KmeshTcMarkDecryptCompatObjects
//	*KmeshTcMarkDecryptCompatPrograms
//	*KmeshTcMarkDecryptCompatMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadKmeshTcMarkDecryptCompatObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadKmeshTcMarkDecryptCompat()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// KmeshTcMarkDecryptCompatSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshTcMarkDecryptCompatSpecs struct {
	KmeshTcMarkDecryptCompatProgramSpecs
	KmeshTcMarkDecryptCompatMapSpecs
	KmeshTcMarkDecryptCompatVariableSpecs
}

// KmeshTcMarkDecryptCompatProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshTcMarkDecryptCompatProgramSpecs struct {
	TcMarkDecrypt *ebpf.ProgramSpec `ebpf:"tc_mark_decrypt"`
}

// KmeshTcMarkDecryptCompatMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshTcMarkDecryptCompatMapSpecs struct {
	KmLogEvent *ebpf.MapSpec `ebpf:"km_log_event"`
	KmNodeinfo *ebpf.MapSpec `ebpf:"km_nodeinfo"`
	KmTmpbuf   *ebpf.MapSpec `ebpf:"km_tmpbuf"`
}

// KmeshTcMarkDecryptCompatVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshTcMarkDecryptCompatVariableSpecs struct {
	BpfLogLevel *ebpf.VariableSpec `ebpf:"bpf_log_level"`
}

// KmeshTcMarkDecryptCompatObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshTcMarkDecryptCompatObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshTcMarkDecryptCompatObjects struct {
	KmeshTcMarkDecryptCompatPrograms
	KmeshTcMarkDecryptCompatMaps
	KmeshTcMarkDecryptCompatVariables
}

func (o *KmeshTcMarkDecryptCompatObjects) Close() error {
	return _KmeshTcMarkDecryptCompatClose(
		&o.KmeshTcMarkDecryptCompatPrograms,
		&o.KmeshTcMarkDecryptCompatMaps,
	)
}

// KmeshTcMarkDecryptCompatMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshTcMarkDecryptCompatObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshTcMarkDecryptCompatMaps struct {
	KmLogEvent *ebpf.Map `ebpf:"km_log_event"`
	KmNodeinfo *ebpf.Map `ebpf:"km_nodeinfo"`
	KmTmpbuf   *ebpf.Map `ebpf:"km_tmpbuf"`
}

func (m *KmeshTcMarkDecryptCompatMaps) Close() error {
	return _KmeshTcMarkDecryptCompatClose(
		m.KmLogEvent,
		m.KmNodeinfo,
		m.KmTmpbuf,
	)
}

// KmeshTcMarkDecryptCompatVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshTcMarkDecryptCompatObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshTcMarkDecryptCompatVariables struct {
	BpfLogLevel *ebpf.Variable `ebpf:"bpf_log_level"`
}

// KmeshTcMarkDecryptCompatPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshTcMarkDecryptCompatObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshTcMarkDecryptCompatPrograms struct {
	TcMarkDecrypt *ebpf.Program `ebpf:"tc_mark_decrypt"`
}

func (p *KmeshTcMarkDecryptCompatPrograms) Close() error {
	return _KmeshTcMarkDecryptCompatClose(
		p.TcMarkDecrypt,
	)
}

func _KmeshTcMarkDecryptCompatClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed kmeshtcmarkdecryptcompat_bpfeb.o
var _KmeshTcMarkDecryptCompatBytes []byte
