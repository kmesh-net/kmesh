name: Kmesh CI Workflow

on:
  pull_request:
    paths-ignore:
      - '**.md'
      - '**.svg'
      - '**.png'
  merge_group: # enable merge queue
  workflow_call:
    secrets:
      CODECOV_TOKEN:
        required: true

jobs:

  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        go-version: [ '1.23' ]

    steps:
    - uses: actions/checkout@v3

    - name: Setup Go
      uses: actions/setup-go@v4.0.0
      with:
        go-version: ${{ matrix.go-version }}

    - name: Run gen-check
      run: |
        make gen-check

    - name: Run Copyright-check
      run : |
        make copyright-check

    

    - name: Build Kmesh
      shell: bash
      run: |
        sudo env "PATH=$PATH" bash ./build.sh

    - name: Setup Enviroments
      run: |
        echo "PKG_CONFIG_PATH=$GITHUB_WORKSPACE/mk" >> $GITHUB_ENV
    
    # Some files such as sockops_bpfel.go require some preprocessing
    - name: golangci-lint prepare 
      run: |
        ./hack/golangci-lint-prepare.sh

    # Since requiring code generated by the Proto compilation, execute go lint after building.  
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3.7.0
      with:
        args: "--config=common/config/.golangci.yaml --out-format colored-line-number"
        skip-pkg-cache: true

    - name: Go Test
      run: |
        sudo env LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:$GITHUB_WORKSPACE/api/v2-c:$GITHUB_WORKSPACE/bpf/deserialization_to_bpf_map PKG_CONFIG_PATH=$GITHUB_WORKSPACE/mk go test -race -v -vet=off -coverprofile=coverage.out ./pkg/...

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
          # Even though token upload token is not required for public repos,
          # but adding a token might increase successful uploads as per:
          # https://community.codecov.com/t/upload-issues-unable-to-locate-build-via-github-actions-api/3954
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.out
          flags: unittests
          fail_ci_if_error: false
          verbose: true
  helm:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.3'
          token: ${{ secrets.GH_PAT }}

      - name: Check for Changes
        id: check_changes
        run: |
          git diff --exit-code deploy/charts/kmesh-helm/Chart.yaml || echo "changed" >> $GITHUB_ENV

       - name: Bump Version
         if: env.changed == 'changed'
         run: |
          # With this we read the current version
          current_version=$(grep 'version:' deploy/charts/kmesh-helm/Chart.yaml | awk '{print $2}')
          IFS='.' read -r major minor patch <<< "$current_version"
          
          # Now we increment the patch version
          new_patch=$((patch + 1))
          new_version="$major.$minor.$new_patch"
          
          # And don't forget to update Chart.yaml with the new version
          sed -i "s/version: .*/version: $new_version/" deploy/charts/kmesh-helm/Chart.yaml

      - name: Update Image Tag
        if: env.changed == 'changed'
        run: |
          sed -i "s/image: .*/image: my-image:new_version/" deploy/kubernetes/deployment.yaml
